#!/usr/bin/env bash

ESY__VERSION="3.0.0"
# The store is compatible with any major version 3.
ESY__STORE_VERSION="3.x.x"
# The caches are compatible with any major version 3.
ESY__CACHE_VERSION="3.x.x"

# http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  SCRIPTDIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$SCRIPTDIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SCRIPTDIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# We store the yarn cache in the binary directory (not the node symlink farm
# directory, but the real directory where esy lives) so that when you uninstall
# esy, and then reinstall it, you will intentionally bust the cache.
ESY__YARN_CACHE_DIR="$SCRIPTDIR/EsyYarnCache-$ESY__CACHE_VERSION/"

# Had to remove this so that we could just use one command `esy` which we
# forward everything to.
# We'll have to reimplement v that feature in the actual js impl.
# CURDIR=`pwd`
# while [ ! -e "$CURDIR/package.json" ]; do
#     if [ "$CURDIR" == "/" ]; then
#         echo "Cannot find package.json" >&2
#         exit 1
#     fi
#     CURDIR=`cd $CURDIR/..; pwd`
# done


# Capture the error output
# Capturing stderr is very important to prevent nodejs from setting
# stderr to nonblocking mode

if [ -z "${ESY__SANDBOX+x}" ]; then
  export ESY__SANDBOX="$PWD"
fi
if [ -z "${ESY__STORE+x}" ]; then
  export ESY__STORE="$HOME/.esy"
fi
if [ -z "${ESY__LOCAL_STORE+x}" ]; then
  export ESY__LOCAL_STORE="$ESY__SANDBOX/_esy/store"
fi

EJECT_PATH="$ESY__SANDBOX/_esy/build-eject"
ENV_PATH="$ESY__SANDBOX/_esy/command-env"

if [ -d "$ESY__SANDBOX/node_modules" ]; then
  DEPENDENCIES_PACKAGE_JSON=`find $ESY__SANDBOX/node_modules -name 'package.json'`
else
  DEPENDENCIES_PACKAGE_JSON=""
fi

needRebuildTarget () {
  TARGET="$1"
  NEED_REBUILD="false"

  # check if target exist
  if [ ! -f "$TARGET" ]; then
    NEED_REBUILD="true"
  else
    # check sandbox package.json
    if [ "$TARGET" -ot "$ESY__SANDBOX/package.json" ]; then
      NEED_REBUILD="true"
    else
      # check each dependencies' package.json
      for dep in $DEPENDENCIES_PACKAGE_JSON; do
        if [ "$TARGET" -ot "$dep" ]; then
          NEED_REBUILD="true"
          break
        fi
      done
    fi
  fi

  echo "$NEED_REBUILD"
}

builtInEject () {
  if [ `needRebuildTarget "$EJECT_PATH/Makefile"` == "true" ]; then
    EJECT_LOG=`node $SCRIPTDIR/esy.js build-eject "$EJECT_PATH" 2>&1`
    if [ $? -ne 0 ]; then
      echo "Failed to prepare build environment:"
      printf "%s\n" "$EJECT_LOG" >&2
      exit 1
    fi
  fi
}

ensureEnvEjected () {
  if [ `needRebuildTarget "$ENV_PATH"` == "true" ]; then
    EJECTED_ENV=`node $SCRIPTDIR/esy.js 2>&1`
    if [ $? -ne 0 ]; then
      echo "Failed to get environment:"
      printf "%s\n" "$EJECTED_ENV" >&2
      exit 1
    else
      mkdir -p `dirname $ENV_PATH`
      echo "$EJECTED_ENV" > "$ENV_PATH"
    fi
  fi
}

builtIn() {
	node $SCRIPTDIR/esy.js $@
}

builtInYarn() {
	node $SCRIPTDIR/yarn.js $@ --cache-folder $ESY__YARN_CACHE_DIR
}

printHelp() {
  cat <<EOF
  Usage: $0 <command> [--help] [--version]

  install               Installs package.json packages, but with the ability
                        to bridge to other non-npm based package managers.

  build                 Builds everything that needs to be built, caches
                        results. Builds according to each package's "esy"
                        entry in package.json. Before building each package,
                        the environment is scrubbed clean then created according
                        to dependencies.

  build-shell           Drops into a shell with environment matching your
                        package's build environment.

  shell                 The same as esy build-shell, but creates a "relaxed"
                        environment - meaning it also inherits your existing
                        shell.

  build-eject           Creates node_modules/.cache/esy/Makefile, which is what
                        esy build normally runs.

  <command>             Executes <command> as if you had executed it inside of
                        esy shell.

EOF
}

printVersion() {
	cat <<EOF
esy version $ESY__VERSION.
EOF
}

execute_any_command() {
  ensureEnvEjected

  source "$ENV_PATH"
  # Checks if command ($1) is present available
  command -v $1 >/dev/null 2>&1 || {
  echo >&2 "$1 command is not installed.";
  exit 1;
  }
  exec "$@"
}

if [ $# -eq 0 ]
then
  printHelp
elif [ $# -eq 1 ]; then
  case $1 in
    build-shell|clean)
      builtInEject
      make -j -s -f "$EJECT_PATH/Makefile" "$1"
      ;;
    build-eject)
      builtInEject
      ;;
    build)
      builtIn build
      ;;
    shell)
      ensureEnvEjected
      source "$ENV_PATH"
      $SHELL
      ;;
    install|add)
      builtInYarn "$@"
      ;;
    --version|-v)
      printVersion
      ;;
    --help|-h)
      printHelp
      ;;
    dump-env)
      ensureEnvEjected
      cat "$ENV_PATH"
      ;;
    -*)
      echo Unknown option "$1" >&2
      exit 1
      ;;
    *)
      execute_any_command "$@"
      break
  esac
else
  case $1 in
    add)
      builtInYarn "$@"
      ;;
    -*)
      echo Unknown option "$1" >&2
      exit 1
      ;;
    *)
      execute_any_command "$@"
      break
  esac
fi

